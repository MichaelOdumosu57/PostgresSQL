

need driver, endpoint, backing up db,  converting to csv

to convert to csv
first give postgres write access to desired directory
COPY accounts TO '/home/uoul/My_Computer/Database_Folder/PostgreSQL/homefile_name.csv' DELIMITER ',' CSV HEADER;
https://tableplus.io/blog/2018/04/postgresql-how-to-export-table-to-csv-file-with-header.html
ready COPY on page 1555

need 18 19 20
19 conatins endpoint

25,27 contains backup

might need 21

https://wiki.postgresql.org/wiki/List_of_drivers   contains driver
https://node-postgres.com/




when using several operators refer to the operator precedence table in mydb/operator_precendence

http://www.heartnsoul.com/ascii_art/elephants.txt
               _..--""-.                  .-""--.._
           _.-'         \ __...----...__ /         '-._
         .'      .:::...,'              ',...:::.      '.
        (     .'``'''::;                  ;::'''``'.     )
         \             '-)              (-'             /
          \             /                \             /
           \          .'.-.            .-.'.          /
            \         | \0|            |0/ |         /
            |          \  |   .-==-.   |  /          |
             \          `/`;          ;`\`          /
              '.._      (_ |  .-==-.  | _)      _..'
                  `"`"-`/ `/'        '\` \`-"`"`
                       / /`;   .==.   ;`\ \
                 .---./_/   \  .==.  /   \ \
                / '.    `-.__)       |    `"
               | =(`-.        '==.   ;
                \  '. `-.           /
                 \_:_)   `"--.....-'

POSTGRES sql

table

 Full secton
                          _.-----.._____,-~~~~-._...__
                          ,-'            /         `....
                        ,'             ,'      .  .  \::.
                      ,'        . ''    :     . \  `./::..
                    ,'    ..   .     .      .  . : ;':::.
                   /     :go. :       . :    \ : ;'.::.
                   |     ' .o8)     .  :|    : ,'. .
                  /     :   ~:'  . '   :/  . :/. .
                 /       ,  '          |   : /. .
                /       ,              |   ./.
                L._    .       ,' .:.  /  ,'.
               /-.     :.--._,-'~~~~~~| ,'|:
              ,--.    /   .:/         |/::| `.
              |-.    /   .;'      .-__)::/    \
 ...._____...-|-.  ,'  .;'      .' '.'|;'      |
   ~--..._____\-_-'  .:'      .'   /  '
    ___....--~~   _.-' `.___.'   ./
      ~~------+~~_. .    ~~    .,'
                  ~:_.' . . ._:'
                     ~~-+-+~~


chapter
           .-~~-. .--.
          /      /   "\
         /    \ |  \   \
        |/\    | \_/-'\ \
        A |   /  ||   /_/
          |__||__||
         /~~~~~~~~~~\
        /\_/\_/\_/\_/\
       /\/ \/ \/ \/ \/\
    __/________________\__



subsecton
           _    _
          / \__/ \_____
         /  /  \  \    `\
         )  \''/  (     |\
         `\__)/__/'_\  / `
            //_|_|~|_|_|
            ^""'"' ""'"'

bullet point
     ___.---.___
   .'  (     )  '.
   )   /)' '(    )
   ',_( ';-;'\_,'
         |-|
         (")


link
        ____
       /.   \__
      /_  \_/  \
     // \  ___ |\
        |_| |_|


tip
                      _    _
                     /=\""/=\
                    (=(0_0 |=)__
                     \_\ _/_/   )
                       /_/   _  /\
                      |/ |\ || |
                         ~ ~  ~




                          _.-----.._____,-~~~~-._...__
                          ,-'            /         `....
                        ,'             ,'      .  .  \::.
   what is            ,'        . ''    :     . \  `./::..
    POSTGRES        ,'    ..   .     .      .  . : ;':::.
     and history   /     :go. :       . :    \ : ;'.::.
                   |     ' .o8)     .  :|    : ,'. .
                  /     :   ~:'  . '   :/  . :/. .
                 /       ,  '          |   : /. .
                /       ,              |   ./.
                L._    .       ,' .:.  /  ,'.
               /-.     :.--._,-'~~~~~~| ,'|:
              ,--.    /   .:/         |/::| `.
              |-.    /   .;'      .-__)::/    \
 ...._____...-|-.  ,'  .;'      .' '.'|;'      |
   ~--..._____\-_-'  .:'      .'   /  '
    ___....--~~   _.-' `.___.'   ./
      ~~------+~~_. .    ~~    .,'
                  ~:_.' . . ._:'
                     ~~-+-+~~

An ORDBMS was the early verison of databases from Berkeley
it offers a lot and it can be exteneded by the user
upgrades to it were foucused on portability and reliablitiy
then came postgres95

use the wiki, web site for latest info mailing list  and yourself to learn more about postgres



                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
5 Reporting bugs    |/\    | \_/-'\ \
                    A |   /  ||   /_/
                      |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__
                    
there are bug reporting guidelines to follow


           _    _
          / \__/ \_____
         /  /  \  \    `\
5.1      )  \''/  (     |\
         `\__)/__/'_\  / `
            //_|_|~|_|_|
            ^""'"' ""'"'
    
if from documentation you cannot understand send the bug and the documenatation



           _    _
          / \__/ \_____
         /  /  \  \    `\
5.2      )  \''/  (     |\
         `\__)/__/'_\  / `
            //_|_|~|_|_|
            ^""'"' ""'"'

state only facts not what you think went wrong
set  psql, say \set VERBOSITY verbose beforehand
from server log run-time parameter log_error_verbosity to verbose

SELECT version(); finds version running be specific where the problem is


           _    _
          / \__/ \_____
         /  /  \  \    `\
5.3      )  \''/  (     |\
         `\__)/__/'_\  / `
            //_|_|~|_|_|
            ^""'"' ""'"'

send bugs to
<pgsql-bugs@lists.postgresql.org>


                          _.-----.._____,-~~~~-._...__
                          ,-'            /         `....
                        ,'             ,'      .  .  \::.
    getting started   ,'        . ''    :     . \  `./::..
    POSTGRES        ,'    ..   .     .      .  . : ;':::.
     and history   /     :go. :       . :    \ : ;'.::.
                   |     ' .o8)     .  :|    : ,'. .
                  /     :   ~:'  . '   :/  . :/. .
                 /       ,  '          |   : /. .
                /       ,              |   ./.
                L._    .       ,' .:.  /  ,'.
               /-.     :.--._,-'~~~~~~| ,'|:
              ,--.    /   .:/         |/::| `.
              |-.    /   .;'      .-__)::/    \
 ...._____...-|-.  ,'  .;'      .' '.'|;'      |
   ~--..._____\-_-'  .:'      .'   /  '
    ___....--~~   _.-' `.___.'   ./
      ~~------+~~_. .    ~~    .,'
                  ~:_.' . . ._:'
                     ~~-+-+~~

                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
Installation        |/\    | \_/-'\ \
                    A |   /  ||   /_/
                      |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__
                    

dont need root to install it
go to chapter 16 on how to install it


                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
Architectural       |/\    | \_/-'\ \
Fundamentals        A |   /  ||   /_/
                      |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__
                    

client-server model
server process - manages database files,
accepts connections to database
perform actions for client
known as postgres

the client wants things to be done and could be anything

if the client and server are on differnt hosts they need a TCP/IP network connection

the postgres daemon handles multiple connections by forking a child server process for each incoming client process


                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
  Installation      |/\    | \_/-'\ \
from package        A |   /  ||   /_/
manager  Database     |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__

if using a package manager refer to it




        ____
       /.   \__
      /_  \_/  \   https://tecadmin.net/install-postgresql-server-on-ubuntu/
     // \  ___ |\
      snd|_| |_|



Adding user postgres to group ssl-cert

Creating config file /etc/postgresql-common/createcluster.conf with new version
Building PostgreSQL dictionaries from installed myspell/hunspell packages...
  en_us
Removing obsolete dictionary files:
Setting up postgresql-11 (11.3-1.pgdg16.04+1) ...
Creating new PostgreSQL cluster 11/main ...
/usr/lib/postgresql/11/bin/initdb -D /var/lib/postgresql/11/main --auth-local peer --auth-host md5
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.UTF-8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

Data page checksums are disabled.

fixing permissions on existing directory /var/lib/postgresql/11/main ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... ok
performing post-bootstrap initialization ... ok
syncing data to disk ... ok

Success. You can now start the database server using:

    


Ver Cluster Port Status Owner    Data directory              Log file
11  main    5432 down   postgres /var/lib/postgresql/11/main /var/log/postgresql/postgresql-11-main.log
update-alternatives: using /usr/share/postgresql/11/man/man1/postmaster.1.gz to provide /usr/share/man/man1/postmaster.1.gz (postmaster.1.gz) in auto mode
Setting up postgresql (11+201.pgdg16.04+1) ...



to access postgres

sudo su - postgres
psql

to learn about basic connection to postgres
\conninfo

to quit
\q



                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
  Creating          |/\    | \_/-'\ \
    A               A |   /  ||   /_/
 Database             |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__



to create
https://www.liquidweb.com/kb/creating-and-deleting-a-postgresql-database/
CREATE DATABASE [dbname;]
    no response sucesss
    command not found: use  /usr/local/pgsql/bin/createdb mydb absolute path
    more problems refer to page 43 in handbook
     Database names must have an alphabetic first character and are limited to 63 bytes in length.

to destroy
    DROP DATABASE [dbname;]
    irrecoverable

to conect
    \c [dbname;]


                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
1.4  Accessing      |/\    | \_/-'\ \
    A               A |   /  ||   /_/
 Database             |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__

you can use psql console, a GUI like pgAdmin or writing your own that works with the protocol

psql mydb  (doesnt work)
 
as postgres
pg_ctlcluster 11 main start
its already running

SELECT version();
SELECT current_date;
SELECT 2 + 2;

if a command start with a  \ its a psql only command

\h for SQL help
\? for internal commands
\q to quit


                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
2  The SQL           |/\    | \_/-'\ \
    language         A |   /  ||   /_/
                       |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__


what postgres has is a modified extension


           _    _
          / \__/ \_____
concepts /  /  \  \    `\
         )  \''/  (     |\
         `\__)/__/'_\  / `
            //_|_|~|_|_|
            ^""'"' ""'"'

its a RDBMS
relation is a math word for table

SQL does not gurantee the order of tables in any way
tables are grouped to databases to a databease cluster managerd byh one postgres server


           _    _
          / \__/ \_____
create a /  /  \  \    `\
new table)  \''/  (     |\
         `\__)/__/'_\  / `
            //_|_|~|_|_|
            ^""'"' ""'"'


CREATE TABLE weather (
 city       varchar(80),
 temp_lo    int,         -- low temperature
 temp_hi    int,         -- high temperature
 prcp       real,         -- precipitation
 date       date
);


CREATE TABLE noop (
 city       varchar(80),
 temp_lo    int,         -- low temperature
 temp_hi    int,         -- high temperature
 prcp       real,         -- precipitation
 date       date
);


you can create this with line breaks just dont use semil colon
the first column is name second is data type -- is used for comments


CREATE TABLE cities (
 name       varchar(80),
 location    point
);

point is a psql only datatype

to remove a table
DROP TABLE tablename;



              _    _
             / \__/ \_____
 populate   /  /  \  \    `\
table       )  \''/  (     |\
            `\__)/__/'_\  / `
               //_|_|~|_|_|
              ^""'"' ""'"'

insert statement is used to fill a table

INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25,
 '1994-11-27');

constants that are not simple number must be surrounded by a single quote
point type  wants a coordinate pair
date accepts many formats

to specify the columns of the table

INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
 VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');

use the COPY command for more effeciency

COPY weather FROM '/home/user/weather.txt';


COPY my_table TO 'file_name.csv' DELIMITER ',' CSV HEADER;
              _    _
             / \__/ \_____
 querying   /  /  \  \    `\
table       )  \''/  (     |\
            `\__)/__/'_\  / `
               //_|_|~|_|_|
              ^""'"' ""'"'
use SELECT
to select everything
SELECT * FROM weather;

to write expressions
SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;
this results in working with the data to produce more meaningful things to your app lookng the 2nd expression

AS  is used to relabel the output column, optional







             ___.---.___
           .'  (     )  '.
WHERE      )   /)' '(    )
           ',_( ';-;'\_,'
                 |-|
                 (")

to specifiy specific quotes from a string

to make conditionals
SELECT * FROM weather
 WHERE city = 'San Francisco' AND prcp > 0.0;


to sort use ORDER
SELECT * FROM weather
 ORDER BY city;

    if they happen to have the same name but thats not the order you want get more columns involved in the SQL command
    SELECT * FROM weather
     ORDER BY city, temp_lo;

to avoid duplcate rows

SELECT DISTINCT city, temp_hi
 FROM weather;

    but if this kicks out what you want use combos until Postgres understands to keep it



                         _    _
                        / \__/ \_____
    joins between      /  /  \  \    `\
table                  )  \''/  (     |\
                       `\__)/__/'_\  / `
                          //_|_|~|_|_|
                         ^""'"' ""'"'

if a query works with more than one table its a join

SELECT city, temp_lo, temp_hi, prcp, date, location
    FROM weather, cities
    WHERE city = name;


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     if a index in not availbe in one of the rows of the table join
       /_/   _  /\      the join query fills it with the previous index. this gets messy
       |/ |\ || |
         ~ ~  ~

                   ___.---.___
                 .'  (     )  '.
INNER JOIN       )   /)' '(    )
                 ',_( ';-;'\_,'
                       |-|
                       (")


SELECT *
 FROM weather INNER JOIN cities ON (weather.city = cities.name);
some times you need to specify whats going on to make your joins cleaner, this is know as qualifying

SELECT weather.city, weather.temp_lo, weather.temp_hi,
    weather.prcp, weather.date, cities.location
    FROM weather, cities
    WHERE cities.name = weather.city;


                   ___.---.___
                 .'  (     )  '.
OUTER JOIN       )   /)' '(    )
                 ',_( ';-;'\_,'
                       |-|
                       (")

when you need empty values where they belong in join statements

SELECT * FROM weather LEFT OUTER JOIN cities ON (weather.city =
 cities.name);

LEFT OUTER JOINS is when the table is on the left of the join,


                   ___.---.___
                 .'  (     )  '.
SELF JOIN        )   /)' '(    )
                 ',_( ';-;'\_,'
                       |-|
                       (")

joining a table against itself, done for calcuations amongst in the table


SELECT W1.city, W1.temp_lo AS low, W1.temp_hi AS high,
 W2.city, W2.temp_lo AS low, W2.temp_hi AS high
 FROM weather W1, weather W2
 WHERE W1.temp_lo < W2.temp_lo
 AND W1.temp_hi > W2.temp_hi;

the tables are relabed in FROM
seen frequently


SELECT W1.city, W1.temp_lo AS lowest, W1.temp_hi AS highest,
    W2.city, W2.temp_lo AS low, W2.temp_hi AS high
    FROM weather W1, weather W2
    WHERE W1.temp_lo < W2.temp_lo
    AND W1.temp_hi > W2.temp_hi;


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )    this is like a double loop for every iter in the table, a second iteration is done
       /_/   _  /\
       |/ |\ || |
         ~ ~  ~


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )    you will see plenty of table abbreviation in SQL programming
       /_/   _  /\
       |/ |\ || |
         ~ ~  ~


                         _    _
                        / \__/ \_____
    aggregate          /  /  \  \    `\
    functions          )  \''/  (     |\
                       `\__)/__/'_\  / `
                          //_|_|~|_|_|
                         ^""'"' ""'"'

 An aggregate
function computes a single result from multiple input rows

to know what city this is related to use subquery

SELECT city FROM weather
 WHERE temp_lo = (SELECT max(temp_lo) FROM weather);





using GROUP BY properly elimates unwanted items
SELECT city, max(temp_lo)
 FROM weather
 GROUP BY city;


use having when you need to return a bool from the comparison of the result of an aggregate function with
another item becuase it does not return the item it retruns bool


SELECT city, max(temp_lo) < 40
 FROM weather
 GROUP BY city
 HAVING max(temp_lo) < 40;

if you want names beginning with S


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   aggregate functions must be used with HAVING and not with WHERE,that the difference
       /_/   _  /\  that expains why can use them tehre
       |/ |\ || |
         ~ ~  ~


                         _    _
                        / \__/ \_____
    Updates            /  /  \  \    `\
    functions          )  \''/  (     |\
                       `\__)/__/'_\  / `
                          //_|_|~|_|_|
                         ^""'"' ""'"'

how you change items in a table

UPDATE weather
 SET temp_hi = temp_hi - 2, temp_lo = temp_lo - 2
 WHERE date > '1994-11-28';


                         _    _
                        / \__/ \_____
    Deletions          /  /  \  \    `\
    functions          )  \''/  (     |\
                       `\__)/__/'_\  / `
                          //_|_|~|_|_|
                         ^""'"' ""'"'


to delete a row
DELETE FROM weather WHERE city = 'Hayward';

DELETE from tablename
it goes and empties the table the table
]




                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
3  Advanced          |/\    | \_/-'\ \
    Features         A |   /  ||   /_/
                       |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__


               _    _
              / \__/ \_____
3.1 concepts /  /  \  \    `\
             )  \''/  (     |\
             `\__)/__/'_\  / `
                //_|_|~|_|_|
                ^""'"' ""'"'

making management easier and prevent data loss/corrpution


               _    _
              / \__/ \_____
3.2 views    /  /  \  \    `\
             )  \''/  (     |\
             `\__)/__/'_\  / `
                //_|_|~|_|_|
                ^""'"' ""'"'

view - a variable that holds a SQL query and acts as a table

CREATE VIEW myview AS
    SELECT city, temp_lo, temp_hi, prcp, date, location
    FROM weather, cities
    WHERE city = name;

SELECT * FROM myview;


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   use views a lot database developers love that, also use views on views, very efficient
       /_/   _  /\
       |/ |\ || |
         ~ ~  ~


               _    _
              / \__/ \_____
3.3 foreign  /  /  \  \    `\
    keys     )  \''/  (     |\
             `\__)/__/'_\  / `
                //_|_|~|_|_|
                ^""'"' ""'"'

sometimes between two related tables you want to make sure if there is something meaningful in the first table that is used for the second table its there in the first table or it cant be added to the second table

in database mydb

CREATE TABLE cities (
    city varchar(80) primary key,
    location point
);


CREATE TABLE weather (
    city varchar(80) references cities(city),
    temp_lo int,
    temp_hi int,
    prcp real,
    date date
);

so  that doing this

INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');

wont work

refer to ch 5 for more info



                   _    _
                  / \__/ \_____
3.4 transactions /  /  \  \    `\
                 )  \''/  (     |\
                 `\__)/__/'_\  / `
                    //_|_|~|_|_|
                    ^""'"' ""'"'


they convert everything into one step and if something fails, it does not ruin your database.
IT HAPPENS COMPLETELY OR NOT AT ALL

also makes sure that the transaction is 100% logged on permanent storage in order to be complete

also  multiple transactions cannot see what each other is doing, they just have the database before it was touched by another transaction and after

in PostgreSQL its done like this

ex
 -------------------------------------------------------------------------
INSERT INTO cities (city, location)
    VALUES ('San Francisco', '(193,27)');
BEGIN;
    INSERT INTO cities (city, location)
        VALUES ('Berkeley', '(221,5)');
    DELETE FROM cities WHERE city = 'San Francisco';
    INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
    INSERT INTO weather VALUES ('Jayton', 45, 53, 0.0, '1994-11-28');
COMMIT;
it fails because Jayton is not in city for cities

 -------------------------------------------------------------------------

                  ___.---.___
                 .'  (     )  '.
ROLLBACKS        )   /)' '(    )
                 ',_( ';-;'\_,'
                       |-|
                       (")

say if partway a SQL query fulfills a conditional we can use ROLLBACK instead of commit, and all updated are canceled


ex
 -------------------------------------------------------------------------
INSERT INTO cities (city, location)
    VALUES ('San Francisco', '(193,27)');
BEGIN;
    INSERT INTO cities (city, location)
        VALUES ('Berkeley', '(221,5)');
    DELETE FROM cities WHERE city = 'San Francisco';
ROLLBACK;
    INSERT INTO weather VALUES ('San Francisco', 45, 53, 0.0, '1994-11-28');


it rolls back say we dont want San Francisco to be deleted from our cities, also Berkeley is not
included in cities

 -------------------------------------------------------------------------

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   in postgres every sql query is wrapped in its own tranaction
       /_/   _  /\
       |/ |\ || |
         ~ ~  ~



                   ___.---.___
                 .'  (     )  '.
SAVEPOINTS       )   /)' '(    )
                 ',_( ';-;'\_,'
                       |-|
                       (")

this is how you selectively keep parts of a transaction
put SAVEPOINT at the end of a SQL query, and rollback with ROLLBACK TO;

INSERT INTO cities (city, location)
    VALUES ('San Francisco', '(193,27)');

ex
--------------------------------------------------
CREATE TABLE accounts(
 name       varchar(80),
 balance    float
);

INSERT INTO  accounts (name, balance)
    VALUES ('Alice', 700.00),('Bob', 900.00),('Wally', 200.00);

BEGIN;

UPDATE accounts SET balance = balance - 100.00
 WHERE name = 'Alice';
SAVEPOINT my_savepoint;
UPDATE accounts SET balance = balance + 100.00
 WHERE name = 'Bob';
-- oops ... forget that and use Wally's account
ROLLBACK TO my_savepoint;
UPDATE accounts SET balance = balance + 100.00
 WHERE name = 'Wally';
COMMIT;
-------------------------------------------------------


                   _    _
                  / \__/ \_____
3.5 window       /  /  \  \    `\
    functions    )  \''/  (     |\
                 `\__)/__/'_\  / `
                    //_|_|~|_|_|
                    ^""'"' ""'"'

 window function performs a calculation across a set of table rows that are somehow related to the current
row. but unlike aggregate functions, the rows are not grouped into a single output

have to learn about this later cannot find an example





                   _    _
                  / \__/ \_____
3.6 inheritance  /  /  \  \    `\
                 )  \''/  (     |\
                 `\__)/__/'_\  / `
                    //_|_|~|_|_|
                    ^""'"' ""'"'


to copy a table without having it linked like a js object
http://www.postgresqltutorial.com/postgresql-copy-table/

ann implementation of OOP, best way to think of it javascript class extensions


database: inheritance

CREATE TABLE cities (
    name text,
    population real,
    altitude int -- (in ft)
);
CREATE TABLE capitals (
    state char(2)
) INHERITS (cities);





                          _.-----.._____,-~~~~-._...__
                          ,-'            /         `....
                        ,'             ,'      .  .  \::.
    The SQL language   ,'        . ''    :     . \  `./::..
                      ,'    ..   .     .      .  . : ;':::.
                     /     :go. :       . :    \ : ;'.::.
                   |     ' .o8)     .  :|    : ,'. .
                  /     :   ~:'  . '   :/  . :/. .
                 /       ,  '          |   : /. .
                /       ,              |   ./.
                L._    .       ,' .:.  /  ,'.
               /-.     :.--._,-'~~~~~~| ,'|:
              ,--.    /   .:/         |/::| `.
              |-.    /   .;'      .-__)::/    \
 ...._____...-|-.  ,'  .;'      .' '.'|;'      |
   ~--..._____\-_-'  .:'      .'   /  '
    ___....--~~   _.-' `.___.'   ./
      ~~------+~~_. .    ~~    .,'
                  ~:_.' . . ._:'
                     ~~-+-+~~




                       .-~~-. .--.
                      /      /   "\
                     /    \ |  \   \
SQL Syntax          |/\    | \_/-'\ \
                    A |   /  ||   /_/
                      |__||__||
                     /~~~~~~~~~~\
                    /\_/\_/\_/\_/\
                   /\/ \/ \/ \/ \/\
                __/________________\__



                   _    _
                  / \__/ \_____
4.1 lexical      /  /  \  \    `\
    structure    )  \''/  (     |\
                 `\__)/__/'_\  / `
                    //_|_|~|_|_|
                    ^""'"' ""'"'

tokens

SELECT * FROM MY_TABLE;

each are tokens
the whole thing is a command


comments  are  done with

 -- comment




      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   in SQL, sometimes the tokens matter
       /_/   _  /\
       |/ |\ || |
         ~ ~  ~


                          ___.---.___
                        .'  (     )  '.
4.1.1. Identifiers      )   /)' '(    )
 and Key Words          ',_( ';-;'\_,'
                              |-|
                              (")

key words
ex
    SELECT, UPDATE, INSERT,DROP

identifiers MY_CUSTOM_TABLE,YOUR_CUSTOM_VIEW




     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   in SQL, dont use $ signs
       /_/   _  /\
       |/ |\ || |
         ~ ~  ~



for identides, they should not be longer than  NAMEDATALEN-1 bytes which is 64
to change this
 NAMEDATALEN constant in src/include/pg_config_manual.h.


IMPT!!!!
 Key words and unquoted identifiers are case insensitive

UPDATE MY_TABLE SET A = 5;
    can equivalently be written as:
uPDaTE my_TabLE SeT a = 5;
    A convention often used is to write key words in upper case and names in lower case, e.g.:
UPDATE my_table SET a = 5;


Delimited idenitifers, words in quotes

UPDATE "my_table" SET "a" = 5;
"UPDATE" would be a identifier then


write "data" as
U&"d\0061t\+000061"

write "slon" as
U&"\0441\043B\043E\043D"



                          ___.---.___
                        .'  (     )  '.
4.1.2. Constants        )   /)' '(    )
                        ',_( ';-;'\_,'
                              |-|
                              (")


String Constants


in SQL, arbitrary sequence of characters bounded by single quotes ('),


SELECT 'foo'      ===
'bar';                          SELECT 'foobar';

lots of more escape stuff



Bit String Constants
exx

B'1001'
only 0 and 1 allowed within quoutes


Numeric Constants

all are taken

1. digits
2. digits.[digits][e[+-]digits]
3. [digits].digits[e[+-]digits]
4. digitse[+-]digits


ex
42
3.5
4.
.001
5e2
1.925e-3


ints are first int (32 bit) bigint (64 bit) then numeric
floating point are always considered numeric

u can force a numeric value to be treated as a type

REAL '1.23' -- string style



4.1.2.7. Constants of Other Types

you can make your own type

type 'string'
'string'::type
CAST ( 'string' AS type )


                          ___.---.___
                        .'  (     )  '.
4.1.3. Operators        )   /)' '(    )
                        ',_( ';-;'\_,'
                              |-|
                              (")

can only get NAMEDATALEN-1 (63 by default) chars


+ - * / < > = ~ ! @ # % ^ & | ` ?



     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )    -- and /* cannot appear in an operator name
       /_/   _  /\  multi-char operator cannot end in   + or - unless it has ~ ! @ # % ^ & | ` ?
       |/ |\ || |
         ~ ~  ~




                          ___.---.___
                        .'  (     )  '.
4.1.4. Special          )   /)' '(    )
    Characters           ',_( ';-;'\_,'
                              |-|
                              (")

A dollar sign ($) followed by digits is used to represent a positional parameter in the body of a function
definition or a prepared statement. In other contexts the dollar sign can be part of an identifier or a
dollar-quoted string constant.

() used to group expressions and enforce order

[] used to select from an array see section 8.15

, to seperate elements of a list

; it terminates a SQL command

:selects slices from arrays, also might be used to prefix var names

* a select all feature

. used as decimal  and seperate schema.table.column



                          ___.---.___
                        .'  (     )  '.
4.1.5.  Comments        )   /)' '(    )
                        ',_( ';-;'\_,'
                              |-|
                              (")


single line
--
mult line

/* multiline comment
 * with nesting: /* nested block comment */
 */



                          ___.---.___
                        .'  (     )  '.
4.1.6.   Operator       )   /)' '(    )
         Precedence      ',_( ';-;'\_,'
                              |-|
                              (")

location: mydb/ operator_precedence
this is a very important table


CREATE TABLE operator_precedence (
 Operator_Element       varchar(100),
 Associativity          varchar(100),
 Description            varchar(100)

);


COPY operator_precedence FROM '/home/uoul/My_Computer/Database_Folder/PostgreSQL/CSV/op.txt' WITH (FORMAT csv);

for problems like this
SELECT 5 ! - 6;
SELECT 5 ! (- 6);
SELECT (5 !) - 6;

postgres 9.5 and before used slighty







                 / \__/ \_____
4.2. Value      /  /  \  \    `\
    Expressions )  \''/  (     |\
                 `\__)/__/'_\  / `
                    //_|_|~|_|_|
                    ^""'"' ""'"'


known as scalar expressions

• A constant or literal value
• A column reference
• A positional parameter reference, in the body of a function definition or prepared statement
• A subscripted expression
• A field selection expression
• An operator invocation
• A function call
• An aggregate expression
• A window function call
• A type cast
• A collation expression
• A scalar subquery
• An array constructor
• A row constructor
• Another value expression in parentheses (used to group subexpressions and override precedence)


                          ___.---.___
                        .'  (     )  '.
4.2.1.   Column         )   /)' '(    )
         Reference      ',_( ';-;'\_,'
                              |-|
                              (")



      _    _
     /=\""/=\
    (=(0_0 |=)__             a colunm can be referenced in the form
     \_\ _/_/   )           correlation.columnname
       /_/   _  /\           use like this
      |/ |\ || |            select accounts.name from accounts;
         ~ ~  ~


                          ___.---.___
                        .'  (     )  '.
4.2.2.   Positional     )   /)' '(    )
         Parameters      ',_( ';-;'\_,'
                              |-|
                              (")

it looks like this
$number
like js parameters passed to a function



CREATE FUNCTION dept(text) RETURNS dept
 AS $$ SELECT * FROM dept WHERE name = $1 $$
 LANGUAGE SQL;


                          ___.---.___
                        .'  (     )  '.
4.2.3.   Subscripts     )   /)' '(    )
                        ',_( ';-;'\_,'
                              |-|
                              (")

when dealing with arrays

expression[subscript]
expression[lower_subscript:upper_subscript]



                          ___.---.___
                        .'  (     )  '.
4.2.4.    Field         )   /)' '(    )
          Selection     ',_( ';-;'\_,'
                              |-|
                              (")


if you get a row back you can use
expression.fieldname to get a parameter in the row


to access

mytable.mycolumn
$1.somecolumn
(rowfunction(a,b)).col3

(compositecol).somefield
(mytable.compositecol).somefield



                          ___.---.___
                        .'  (     )  '.
4.2.5.    Operator      )   /)' '(    )
          Invocations    ',_( ';-;'\_,'
                              |-|
                              (")

three ways

expression operator expression (binary infix operator)
operator expression (unary prefix operator)
expression operator (unary postfix operator)


                          ___.---.___
                        .'  (     )  '.
4.2.6.     Function     )   /)' '(    )
          Calls         ',_( ';-;'\_,'
                              |-|
                              (")


to make a function call

function_name ([expression [, expression ... ]] )

CREATE FUNCTION dept(text) RETURNS accounts
 AS $$
    SELECT * FROM accounts WHERE name = $1
    $$
 LANGUAGE SQL;
SELECT dept('Bob')

$1 represents the parameter text


                          ___.---.___
                        .'  (     )  '.
4.2.7.    Aggregate     )   /)' '(    )
          Expressions   ',_( ';-;'\_,'
                              |-|
                              (")


SELECT array_agg(name ORDER BY balance DESC) FROM accounts;

when using order by it must go after all the aggregate argumennts

SELECT string_agg(name, ',' ORDER BY balance) FROM accounts;

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   array_agg takes everything in a column and puts it into an array
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   string_agg takes everything in a column and puts it into an string seperated by the 2nd column
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )   The ability to specify both DISTINCT and ORDER BY in an aggregate function is a
       /_/   _  /\  PostgreSQL extension
      |/ |\ || |
         ~ ~  ~


4.2.8. Window Function Calls


                          ___.---.___
                        .'  (     )  '.
4.2.8. Window           )   /)' '(    )
  Function Calls        ',_( ';-;'\_,'
                              |-|
                              (")

PARTITION BY only returns expressions, not output names

i dont understand I have not seen a window function in practice


                          ___.---.___
                        .'  (     )  '.
4.2.9. Type Casts       )   /)' '(    )
                        ',_( ';-;'\_,'
                              |-|
                              (")


just be careful but there are tools to help you from making mistakes
it not showing you how to use them


                          ___.---.___
                        .'  (     )  '.
4.2.10. Collition       )   /)' '(    )
        Expressions     ',_( ';-;'\_,'
                              |-|
                              (")

Collation - writing of information to a standard order

db :roomate_misteps

SELECT date, media_link, incident_part FROM mailperson  ORDER BY media_link COLLATE "7";
idk man




                          ___.---.___
                        .'  (     )  '.
4.2.11. Scalar          )   /)' '(    )
Subqueries              ',_( ';-;'\_,'
                              |-|
                              (")


For example, the following finds the largest city population in each state:

SELECT name, (SELECT max(pop) FROM cities WHERE cities.state =
 states.name)
 FROM states;


 this query would help me find the max times from each row in mailperson off equal dates but for the rows that have more then one media link, we have to choose a time then link it back into that empty row in the table a complex query I have no idea of doing

SELECT  distinct date , (SELECT max(times) FROM mailperson )FROM mailperson a INNER JOIN "73743e9466173e49ae700962e461054cb99e52e0d2bbc828" b ON(true);



      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )    scalar is like one distict result out of a query
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~



                          ___.---.___
                        .'  (     )  '.
4.2.12. Array           )   /)' '(    )
Constructors            ',_( ';-;'\_,'
                              |-|
                              (")

what it is
SELECT ARRAY[1,2,3+4];


to type cast an array
SELECT ARRAY[1,2,22.7]::integer[];


a multidimensional array

SELECT ARRAY[[1,2],[3,4]];
SELECT ARRAY[[1,2],[3,4],5];
SELECT ARRAY[[1,2],[3,4],[7.2,2]];

the problem with the second is that this is typescript like reponse where it expected to be array[][2]
they also cant take strings

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     in postgreSQL arrays look like  this {}
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~

can construct an array from a subquery

db: roomate_misteps
SELECT ARRAY((SELECT max(times) FROM mailperson ));



      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     for this to work it must return a single column
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~


4.2.13. Row Constructors

                          ___.---.___
                        .'  (     )  '.
4.2.13. Row             )   /)' '(    )
Constructors            ',_( ';-;'\_,'
                              |-|
                              (")

db: roomate_misteps
to make a random row not part of a table

SELECT ROW(1,2.5,'this is a test');


to get rows and concatenate a value to each in memory
SELECT ROW(mailperson.*, 42) FROM mailperson;
SELECT ROW(mailperson.date, 42) FROM mailperson;



db mydb
CREATE TABLE mytable(f1 int, f2 float, f3 text);
CREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' LANGUAGE
 SQL;

CREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);

CREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT $1.f1'
 LANGUAGE SQL;

-- fot tables we dont need to cast
SELECT getf1(ROW(1,2.5,'this is a test'));

-- if you had two or more different tagbles using the same function name you must use these below:
SELECT getf1(ROW(1,2.5,'this is a test')::mytable);


SELECT getf1(CAST(ROW(11,'this is a test',2.5) AS myrowtype));

SELECT ROW(1,2.5,'this is a test') = ROW(1, 3, 'not the same')


     _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )       if you get f its false if you get t its true, in postgreSQL only 1 = for comaprsion
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~


4.2.14. Expression Evaluation Rules


                          ___.---.___
                        .'  (     )  '.
4.2.14. Expression      )   /)' '(    )
Evaluation Rules         ',_( ';-;'\_,'
                              |-|
                              (")

sometimes your subexpressions dont evaluate at all

in postgrest it wont event get to somefunc()

SELECT true OR somefunc();




      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )    DONT use functions that have side effects as part of complex expressions
       /_/   _  /\   especially with where and having. boolean expression will do nasty things
      |/ |\ || |
         ~ ~  ~

to deal with this use the CASE keyword a construct but use when necessary

SELECT ... WHERE CASE WHEN x > 0 THEN y/x > 1.5 ELSE false END;

this will fail because the query is in the planning stage so dont use immutable expressions (1/0) there


SELECT CASE WHEN x > 0 THEN x ELSE 1/0 END FROM tab;


also will fail with aggregates

SELECT CASE WHEN min(employees) > 0
 THEN avg(expenses / employees)
 END
 FROM departments;

because aggregates compute first so the min and avg run befor the THEN  can do its job



      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )    use IF-THEN-ELSE  over CASE
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~



               _    _
              / \__/ \_____
4.3          /  /  \  \    `\
Calling      )  \''/  (     |\
Function     `\__)/__/'_\  / `
                //_|_|~|_|_|
                ^""'"' ""'"'

positinoal notation
named      notation useful for many arguments
mixed      notattion

sample

CREATE FUNCTION concat_lower_or_upper(a text, b text, uppercase
 boolean DEFAULT false)
RETURNS text
AS
$$
 SELECT CASE
 WHEN $3 THEN UPPER($1 || ' ' || $2)
 ELSE LOWER($1 || ' ' || $2)
 END;
$$
LANGUAGE SQL IMMUTABLE STRICT;


concat_lower_or_upper
two must params,
    a&b
optional
    uppercase its default is false


                             ___.---.___
                           .'  (     )  '.
4.3.1. Using Positional    )   /)' '(    )
Notation                   ',_( ';-;'\_,'
                                 |-|
                                 (")


this is positional
SELECT concat_lower_or_upper('Hello', 'World', true);

left to right
with defaults right to left so this


CREATE FUNCTION cU(a text DEFAULT 'yamcha', b text, uppercase
 boolean DEFAULT false)

does not work


                             ___.---.___
                           .'  (     )  '.
4.3.2. Using Named         )   /)' '(    )
Notation                   ',_( ';-;'\_,'
                                 |-|
                                 (")


there are more like function calls
done in any order
SELECT concat_lower_or_upper(b => 'World',a => 'Hello');




      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )       use := for backwards compatablility
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~




                             ___.---.___
                           .'  (     )  '.
4.3.3. Using Mixed         )   /)' '(    )
Notation                   ',_( ';-;'\_,'
                                 |-|
                                 (")


also more fucntion calls
SELECT concat_lower_or_upper('Hello', 'World', uppercase => true);



                   _    _
                  / \__/ \_____
 pg 1555         /  /  \  \    `\
 pdf pg 1594     )  \''/  (     |\
Copy             `\__)/__/'_\  / `
                    //_|_|~|_|_|
                    ^""'"' ""'"'

incomplete for more return here


COPY table_name [ ( column_name [, ...] ) ]
 FROM { 'filename' | PROGRAM 'command' | STDIN }
 [ [ WITH ] ( option [, ...] ) ]

COPY { table_name [ ( column_name [, ...] ) ] | ( query ) }
 TO { 'filename' | PROGRAM 'command' | STDOUT }
 [ [ WITH ] ( option [, ...] ) ]

where option can be one of:
 FORMAT format_name
 OIDS [ boolean ]
 FREEZE [ boolean ]
 DELIMITER 'delimiter_character'
 NULL 'null_string'
 HEADER [ boolean ]
 QUOTE 'quote_character'
 ESCAPE 'escape_character'
 FORCE_QUOTE { ( column_name [, ...] ) | * }
 FORCE_NOT_NULL ( column_name [, ...] )
 FORCE_NULL ( column_name [, ...] )
 ENCODING 'encoding_name'


can also copy from select



COPY accounts TO '/home/uoul/My_Computer/Database_Folder/PostgreSQL/homefile_name.csv' DELIMITER ',' CSV HEADER

when program is specified there is software the postgresql user must have permission to use
when STDIN or STDOUT is specified there is a socket

query
    A SELECT, VALUES, INSERT, UPDATE or DELETE
    E command whose results are to be copied.

For INSERT, UPDATE and DELETE queries a RETURNING clause must be provided, and the target
relation must not have a conditional rule, nor an ALSO rule, nor an INSTEAD rule that expands to
multiple statements.


FORMAT  select data format,
default:text
        binary
        csv


DELIMITER
    specifies how the indexes are seperated
    tab for  text format a comma for csv
    1 byte char is allowed not allowed for binary

NULL
    Specifies the string that represents a null value. The default is \N (backslash-N) in text format, and
    an unquoted empty string in CSV format.


HEADER
    on output  inputs column names, on input first line is ignored consided to be column names



On Success
    COPY count - number of rows copied

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     -- use  COPY (SELECT* FROM viewname) TO  when dealing with views
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     -- COPY (SELECT * FROM table) TO when you have child tables
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     -- only db superusers and those with  pg_read_server_files,
       /_/   _  /\    pg_write_server_files, or pg_execute_server_program
      |/ |\ || |
         ~ ~  ~

      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     -- use absolute file paths
       /_/   _  /\
      |/ |\ || |
         ~ ~  ~


      _    _
     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     -- COPY on error stops at first operation in a copy from this is a memory leak
       /_/   _  /\   -- use VACUUM to recover wasted space
      |/ |\ || |
         ~ ~  ~

     /=\""/=\
    (=(0_0 |=)__
     \_\ _/_/   )     -- FORCE_NULL and FORCE_NOT_NULL can be used simultaneously on the same column. This results in
       /_/   _  /\   -- converting quoted null strings to null values and unquoted null strings to empty strings.
      |/ |\ || |
         ~ ~  ~



                             ___.---.___
                           .'  (     )  '.
4.3.3. File Formats         )   /)' '(    )
                            ',_( ';-;'\_,'
                                 |-|
                                 (")


